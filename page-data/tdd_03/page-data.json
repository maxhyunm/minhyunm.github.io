{"componentChunkName":"component---src-templates-blog-post-js","path":"/tdd_03/","result":{"data":{"site":{"siteMetadata":{"title":"Write What You Know"}},"markdownRemark":{"id":"f2c7321a-be0d-5b28-9133-589feff19ebd","excerpt":"부제 : 와 벌써부터 너무 길다 때려칠까? 아냐 그래도 1부까진 해야 아니 근데 참고서적 : \n환경 : , ,  ,  ,   Chapter 05. 사용자 입력 저장하기 마치 폼 입력만 처리하는 것처럼 앙큼한 제목을 하고 있지만 30p에 달하는 길이의 챕터 5…\n더 끔찍한 건 챕터…","html":"<h3>부제 : 와 벌써부터 너무 길다 때려칠까? 아냐 그래도 1부까진 해야 아니 근데</h3>\n<br>\n<p>참고서적 : <code class=\"language-text\">클린 코드를 위한 테스트 주도 개발(해리 J.W. 퍼시벌 저)</code><br>\n환경 : <code class=\"language-text\">Mac(M1)</code>, <code class=\"language-text\">Python 3.8.3</code>,  <code class=\"language-text\">Django 4.0.4</code>,  <code class=\"language-text\">Selenium 4.1.3</code>,  <code class=\"language-text\">Firefox</code><br></p>\n<h3>Chapter 05. 사용자 입력 저장하기<br></h3>\n<p>마치 폼 입력만 처리하는 것처럼 앙큼한 제목을 하고 있지만 30p에 달하는 길이의 챕터 5…<br>\n더 끔찍한 건 챕터 6은 더 길다는 것이다… ㅎ…<br><br></p>\n<p>이번에 작업할 내용은 사용자가 입력한 작업 아이템을 서버로 보내고 이를 저장 -> 다시 사용자에게 보여주는 시스템이다. 이번에도 역시 한 번에 한 가지씩 진행하며, 테스트에 필요한 최소한의 기능만 구현한다. 이 과정에서 머리도 쓰지 말고 그냥 그대로 하나씩 따라하라고 대놓고 적혀있다. 정말 이대로 괜찮은지 싶지만 테스트염소 님이 그렇게 하란다니까 별 수 없지. 근데 왜 염소인지? 공부가 하기 싫으니 쓸데 없는 것만 궁금함. 분명히 별 의미 없겠지 파이썬이 몬티파이썬의 파이썬인 것처럼…<br><br></p>\n<p>아무튼 그렇다고 하니까 + 내용이 부연설명 추가하며 정리하기엔 너무 길고 나는 너무 지쳤기 때문에<br>\n이번 챕터는 전보다 더 코드작성+테스트결과에만 집중해서 정리해보도록 하겠음.<br>\n그 사이에 버전정보 등으로 나는 오류가 있다면 추가로 작성해 두도록 할 것임…<br></p>\n<p>먼저 POST 리퀘스트를 보내기 위한 폼을 작성해야 하므로 lists/templates/home.html에 아래 내용을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Your To-Do list<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item_text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_new_item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>작업 아이템 입력<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_list_table<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그 뒤에 기능테스트를 실행하니 아래와 같은 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of &lt;table id=&quot;id_list_table&quot;&gt; is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed</code></pre></div>\n<p>앗… 책에는 NoSuchElementException이었는데 나는 다른 에러가 난다. 하지만 에러 위치는 동일한 것으로 보아 원인은 같은 것인가? 아무튼 책에서는 이렇게 예측 못한 에러가 발생할 시 아래와 같은 방법을 사용하라고 되어 있다.<br></p>\n<ul>\n<li>print를 활용해 현재 페이지 텍스트 내용 출력</li>\n<li>현재 상태를 더 잘 나타낼 수 있도록 error 메시지를 개선</li>\n<li>수동으로 웹사이트를 열어보기</li>\n<li>time.sleep을 활용하여 실행 중인 테스트 일시정지 시키기<br></li>\n</ul>\n<p>여기서는 time.sleep을 활용하여 functional_tests.py를 수정해보도록 한다.<br>\n에러가 발생하는 위치 앞에 time.sleep을 적는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 엔터키를 치면 페이지가 갱신되고 작업 목록에 해당 할일 내용이</span>\n<span class=\"token comment\"># \"1: 공작깃털 사기\" 형식으로 추가된다</span>\ninputbox<span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>Keys<span class=\"token punctuation\">.</span>ENTER<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> time\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\ntable <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">'id_list_table'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다시 테스트를 돌리면 CSRF 에러가 난다. 화면을 캡쳐하고 싶지만 오늘도 힘이 없기 때문에…<br>\n대충 아래와 같이 뜬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">Forbidden (403)\nCSRF verification failed. Request aborted.</code></pre></div>\n<p>CSRF 오류를 해결하려면 템플릿단에서 csrf_token을 추가해주어야 한다.<br>\n관련하여 상세히 알고 싶으신 분들은 django csrf 보안 관련 글들을 찾아보시기를 권함…<br>\n아무튼 아래와 같이 lists/templates/home.html를 수정하는데<br>\n원래는 { 다음에 바로 %가 와야 하지만 지킬에서 이상하게 오류가 나서 중간에 \\를 넣었다.<br>\n그리고 여기서 갑자기 예문 플레이스홀더 내용이 영문으로 변경되어 있는데 이건 번역을 덜 하셔서 그런 듯…<br>\n나는 한글 상태로 그대로 두었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item_text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_new_item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>작업 아이템 입력<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    {/% csrf_token %}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 다시 기능테스트 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">AssertionError: False is not true : 신규 작업이 테이블에 표시되지 않는다</code></pre></div>\n<p>이것은 time.sleep이 남아있어서 그렇다고 함. 다시 functional_tests.py로 가서 time.sleep을 삭제해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">inputbox<span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>Keys<span class=\"token punctuation\">.</span>ENTER<span class=\"token punctuation\">)</span>\ntable <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">'id_list_table'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n다음은 POST요청 처리 부분으로 넘어간다.<br>\nlists/tests.py의 HomePageTest 클래스에 POST 요청 처리와 반환된 HTML이 신규 아이템 텍스트를 포함하고 있는지 확인하는 새로운 메소드를 추가한다.\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_home_page_returns_correct_html</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_home_page_can_save_a_POST_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    request <span class=\"token operator\">=</span> HttpRequest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">=</span> <span class=\"token string\">'POST'</span>\n    request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">'item_text'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'신규 작업 아이템'</span>\n    \n    response <span class=\"token operator\">=</span> home_page<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\t\t\n    self<span class=\"token punctuation\">.</span>assertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'신규 작업 아이템'</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이후에 단위테스트를 실행하면</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">AssertionError: &#39;신규 작업 아이템&#39; not found in &#39;&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;To-Do lists&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;h1&gt;Your To-Do list&lt;/h     &lt;form method=&quot;POST&quot;&gt;\\n            &lt;input name=&quot;item_text&quot; id=&quot;id_new_item&quot; placeholder=&quot;작업 아이템 입력&quot; /&gt;\\n            &lt;input type=&quot;hidden&quot; name=&quot;csrfmietoken&quot; value=&quot;a7A5DZgmw6TM6CnlXLRr4c8QNUYyUIU9TmS9w5XJtDbf69UuRoHFxkmzanbHT9iL&quot;&gt;\\n        &lt;/form&gt;\\n        &lt;table id=&quot;id_list_table&quot;&gt;\\n        &lt;/table&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;&#39;</code></pre></div>\n<p>아니 왜케 길어<br>\n아무튼 어설션 에러가 발생한다. 이제 lists/views.py에 아래처럼 if문을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">home_page</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">'item_text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'home.html'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 lists/templates/home.html 파일에 아래처럼 아이템 내용을 추가한다.<br>\n여전히 오류 방지를 위해 { 뒤에 \\를 추가했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Your To-Do list<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item_text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_new_item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enter a to-do item<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        {/% csrf_token %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_list_table<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>{/{ new_item_text }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그 다음 lists/tests.py 로 돌아와서 내용을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">self<span class=\"token punctuation\">.</span>assertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'A new list item'</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nexpected_html <span class=\"token operator\">=</span> render_to_string<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'home.html'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'new_item_text'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A new list item'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> expected_html<span class=\"token punctuation\">)</span></code></pre></div>\n<p>단위테스트에 대한 에러메세지는 여전하다. 뷰처리가 없기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">AssertionError: &#39;신규 작업 아이템&#39; != &#39;&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;To-Do [329 chars]tml&gt;&#39;</code></pre></div>\n<p>그럼 이제 lists/views.py 파일을 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">home_page</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'home.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'new_item_text'</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">'item_text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음 이번엔 기능테스트를 돌리면 아래와 같은 에러가 난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">KeyError: &#39;item_text&#39;</code></pre></div>\n<p>책이랑은 다르게 생기긴 했는데 동일한 위치에 대한 키 에러다.<br>\n예상치 못한 결과로 POST 요청 처리를 하는 코드가 잘못됐다는 뜻이라고 한다.<br>\nlists/views.py를 다시 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">home_page</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'home.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token string\">'new_item_text'</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'item_text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>코드가 POST.get 방식으로 변경된 것을 볼 수 있다.<br>\n기능테스트 결과는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"command\"><pre class=\"language-command\"><code class=\"language-command\">selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of &lt;table id=&quot;id_list_table&quot;&gt; is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed</code></pre></div>\n<p>떼잉<br>\n오류 메시지가 책이랑 전혀 다른데 일단은 책에서 시킨대로 functional_tests.py에 오류 메시지 개선사항을 넣는다.<br>\n이 과정에서 assertTrue로 되어있던 것을 assertIn으로 변경했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">self<span class=\"token punctuation\">.</span>assertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'1: 공작깃털 사기'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> rows<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 lists/templates/home.html도 임시적으로 아래와 같이 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>1: {/{ new_item_text }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>당연하게도 나의 에러는 개선이 되지 않았음… 떼잉<br></p>","frontmatter":{"title":"TDD Study - week 3","date":"May 17, 2022","description":null}},"previous":{"fields":{"slug":"/tdd_02/"},"frontmatter":{"title":"TDD Study - week 2"}},"next":{"fields":{"slug":"/celery_01/"},"frontmatter":{"title":"Celery"}}},"pageContext":{"id":"f2c7321a-be0d-5b28-9133-589feff19ebd","previousPostId":"edfb45a7-0c73-5368-8e74-9035d066be93","nextPostId":"97315f99-a1a6-50da-a0e9-ac982a947198"}},"staticQueryHashes":["2841359383","3257411868"]}